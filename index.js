/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

const steamDllPath = join(__dirname, 'redist');

if (platform === 'win32') {
  if (arch === 'x64') {
    process.env.PATH = `${join(steamDllPath, 'win64', 'steam_api64.dll')};${process.env.PATH}`;
  } else {
    throw new Error(`Unsupported architecture on Windows: ${arch}`);
  }
} else if (platform === 'darwin') {
  if (arch === 'x64') {
    process.env.LD_LIBRARY_PATH = `${join(steamDllPath, 'osx', 'libsteam_api.dylib')};${process.env.LD_LIBRARY_PATH}`;
  } else {
    throw new Error(`Unsupported architecture on macOS: ${arch}`);
  }
} else if (platform === 'linux') {
  if (arch === 'x64') {
    process.env.LD_LIBRARY_PATH = `${join(steamDllPath, 'linux64', 'libsteam_api.so')};${process.env.LD_LIBRARY_PATH}`;
  } else if (arch === 'ia32') {
    process.env.LD_LIBRARY_PATH = `${join(steamDllPath, 'linux32', 'libsteam_api.so')};${process.env.LD_LIBRARY_PATH}`;
  } else {
    throw new Error(`Unsupported architecture on Linux: ${arch}`);
  }
}

// Now load your native module
const nativeAddon = require('./build/Release/my_native_module.node');

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'steamworks-ts.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.android-arm64.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'steamworks-ts.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.android-arm-eabi.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'steamworks-ts.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.win32-x64-msvc.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'steamworks-ts.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'steamworks-ts.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'steamworks-ts.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./steamworks-ts.darwin-universal.node')
      } else {
        nativeBinding = require('@ldlework/steamworks-ts-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'steamworks-ts.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.darwin-x64.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'steamworks-ts.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.darwin-arm64.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'steamworks-ts.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./steamworks-ts.freebsd-x64.node')
      } else {
        nativeBinding = require('@ldlework/steamworks-ts-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-x64-musl.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-x64-gnu.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-arm64-musl.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-arm-musleabihf.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-arm-musleabihf')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-arm-gnueabihf.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-arm-gnueabihf')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'steamworks-ts.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./steamworks-ts.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('@ldlework/steamworks-ts-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'steamworks-ts.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./steamworks-ts.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('@ldlework/steamworks-ts-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { itemStateToString, WorkshopItemVisibility, WorkshopFileType, WorkshopQueryType, WorkshopUGCType, UserWorkshopListType, UserWorkshopListOrder, WorkshopItemStateEnum, UgcClient, FriendRelationshipEnum, PersonaStateEnum, sum, SteamClient } = nativeBinding

module.exports.itemStateToString = itemStateToString
module.exports.WorkshopItemVisibility = WorkshopItemVisibility
module.exports.WorkshopFileType = WorkshopFileType
module.exports.WorkshopQueryType = WorkshopQueryType
module.exports.WorkshopUGCType = WorkshopUGCType
module.exports.UserWorkshopListType = UserWorkshopListType
module.exports.UserWorkshopListOrder = UserWorkshopListOrder
module.exports.WorkshopItemStateEnum = WorkshopItemStateEnum
module.exports.UgcClient = UgcClient
module.exports.FriendRelationshipEnum = FriendRelationshipEnum
module.exports.PersonaStateEnum = PersonaStateEnum
module.exports.sum = sum
module.exports.SteamClient = SteamClient
